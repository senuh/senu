const config = require("../settings");
const fs = require("fs");
const path = require("path");
const { cmd } = require("../lib/command");
const { downloadContentFromMessage } = require("@whiskeysockets/baileys");

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üßô‚Äç‚ôÇÔ∏è PRIVACY MENU MAIN
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cmd(
  {
    pattern: "privacy1",
    alias: ["privacymenu", "privmenu"],
    desc: "Full privacy settings control panel",
    category: "privacy",
    react: "üîê",
    filename: __filename,
  },
  async (conn, mek, m, { from, quoted, sender, pushname, reply }) => {
    try {
      const menuText = `üîê *Privacy Settings Center*

Hello *${pushname || "User"}* üëã  
Welcome to your privacy control panel.

üìã *Available Options:*
1Ô∏è‚É£ Blocklist  
2Ô∏è‚É£ Get Bio  
3Ô∏è‚É£ Set Profile Picture Privacy  
4Ô∏è‚É£ Set Online Privacy  
5Ô∏è‚É£ Update Bio  
6Ô∏è‚É£ Get Current Privacy  
7Ô∏è‚É£ Change Profile Picture  
8Ô∏è‚É£ Change Display Name  
9Ô∏è‚É£ Group Add Privacy  
üîü Get Profile Picture`;

      await conn.sendMessage(
        from,
        {
          text: menuText,
          footer: "üßô‚Äç‚ôÇÔ∏è ZANTA √ó MD OFC | Privacy Control",
          buttons: [
            { buttonId: ".blocklist", buttonText: { displayText: "üìã Blocklist" }, type: 1 },
            { buttonId: ".getbio", buttonText: { displayText: "üí¨ Get Bio" }, type: 1 },
            { buttonId: ".getprivacy", buttonText: { displayText: "üîç View Privacy" }, type: 1 },
          ],
          sections: [
            {
              title: "üîê Privacy Management Menu",
              rows: [
                { title: "üìã Blocklist", rowId: ".blocklist", description: "View blocked users" },
                { title: "üí¨ Get Bio", rowId: ".getbio", description: "Check user's WhatsApp bio" },
                { title: "üñºÔ∏è Set Profile Privacy", rowId: ".setppall all", description: "Set who can see profile picture" },
                { title: "üü¢ Set Online Privacy", rowId: ".setonline all", description: "Set visibility of your online status" },
                { title: "‚úèÔ∏è Update Bio", rowId: ".updatebio Hello there!", description: "Change bot's about text" },
                { title: "üîç View Current Privacy", rowId: ".getprivacy", description: "See all privacy settings" },
                { title: "üñºÔ∏è Change Bot Profile Picture", rowId: ".setpp", description: "Reply with an image to use as profile picture" },
                { title: "üè∑Ô∏è Change Bot Display Name", rowId: ".setmyname My New Bot", description: "Update display name" },
                { title: "üë• Group Add Privacy", rowId: ".groupsprivacy contacts", description: "Control who can add bot to groups" },
                { title: "üßë‚Äçü¶∞ Get User Profile Picture", rowId: ".getpp", description: "Fetch a user's profile photo" },
              ],
            },
          ],
          headerType: 4,
        },
        { quoted: mek }
      );
    } catch (e) {
      console.error(e);
      reply(`‚ö†Ô∏è Error: ${e.message}`);
    }
  }
);

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üìã BLOCKLIST
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cmd(
  {
    pattern: "blocklist",
    desc: "View the list of blocked users.",
    category: "privacy",
    react: "üìã",
    filename: __filename,
  },
  async (conn, mek, m, { from, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ You are not the owner!*");
    try {
      const blockedUsers = await conn.fetchBlocklist();
      if (!blockedUsers.length) return reply("üìã Your block list is empty.");
      const list = blockedUsers.map((u, i) => `üö´ ${i + 1}. ${u.split("@")[0]}`).join("\n");
      reply(`üìã *Blocked Users (${blockedUsers.length}):*\n\n${list}`);
    } catch (err) {
      reply(`‚ùå Failed to fetch block list: ${err.message}`);
    }
  }
);

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üí¨ GET BIO
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cmd(
  {
    pattern: "getbio",
    desc: "Displays the user's bio.",
    category: "privacy",
    filename: __filename,
  },
  async (conn, mek, m, { args, reply }) => {
    try {
      const jid = args[0] || mek.key.remoteJid;
      const about = await conn.fetchStatus?.(jid);
      if (!about) return reply("No bio found.");
      reply(`üßæ *User Bio:*\n\n${about.status}`);
    } catch (e) {
      reply("‚ö†Ô∏è Error fetching bio.");
    }
  }
);

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üñºÔ∏è SET PROFILE PRIVACY
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cmd(
  {
    pattern: "setppall",
    desc: "Update Profile Picture Privacy",
    category: "privacy",
    react: "üîê",
    filename: __filename,
  },
  async (conn, mek, m, { args, reply, isOwner }) => {
    if (!isOwner) return reply("‚ùå You are not the owner!");
    try {
      const value = args[0] || "all";
      const valid = ["all", "contacts", "contact_blacklist", "none"];
      if (!valid.includes(value))
        return reply("‚ùå Invalid option. Use: all, contacts, contact_blacklist, none");
      await conn.updatePrivacySetting("profile", value);
      reply(`‚úÖ Profile picture privacy set to *${value}*`);
    } catch (e) {
      reply(`‚ùå Error: ${e.message}`);
    }
  }
);

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üü¢ SET ONLINE PRIVACY
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cmd(
  {
    pattern: "setonline",
    desc: "Update Online Privacy",
    category: "privacy",
    react: "üü¢",
    filename: __filename,
  },
  async (conn, mek, m, { args, reply, isOwner }) => {
    if (!isOwner) return reply("‚ùå You are not the owner!");
    try {
      const value = args[0] || "all";
      const valid = ["all", "match_last_seen"];
      if (!valid.includes(value))
        return reply("‚ùå Invalid option. Use: all or match_last_seen");
      await conn.updatePrivacySetting("online", value);
      reply(`‚úÖ Online privacy updated to *${value}*`);
    } catch (e) {
      reply(`‚ö†Ô∏è Error: ${e.message}`);
    }
  }
);

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üñºÔ∏è SET PROFILE PICTURE
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cmd(
  {
    pattern: "setpp",
    desc: "Set bot profile picture.",
    category: "privacy",
    react: "üñºÔ∏è",
    filename: __filename,
  },
  async (conn, mek, m, { quoted, isOwner, reply }) => {
    if (!isOwner) return reply("‚ùå You are not the owner!");
    if (!quoted?.message?.imageMessage)
      return reply("‚ùå Please reply to an image.");
    try {
      const stream = await downloadContentFromMessage(
        quoted.message.imageMessage,
        "image"
      );
      let buffer = Buffer.from([]);
      for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
      const file = path.join(__dirname, `${Date.now()}.jpg`);
      fs.writeFileSync(file, buffer);
      await conn.updateProfilePicture(conn.user.id, { url: `file://${file}` });
      fs.unlinkSync(file);
      reply("üñºÔ∏è Profile picture updated successfully!");
    } catch (e) {
      reply(`‚ùå Error: ${e.message}`);
    }
  }
);

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üè∑Ô∏è SET DISPLAY NAME
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cmd(
  {
    pattern: "setmyname",
    desc: "Set your WhatsApp display name.",
    category: "privacy",
    react: "üè∑Ô∏è",
    filename: __filename,
  },
  async (conn, mek, m, { args, reply, isOwner }) => {
    if (!isOwner) return reply("‚ùå You are not the owner!");
    const name = args.join(" ");
    if (!name) return reply("‚ùå Provide a name.");
    try {
      await conn.updateProfileName(name);
      reply(`‚úÖ Display name updated to: *${name}*`);
    } catch (e) {
      reply("‚ùå Failed to set name.");
    }
  }
);

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// ‚úèÔ∏è UPDATE BIO
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cmd(
  {
    pattern: "updatebio",
    desc: "Change the Bot's Bio (About).",
    category: "privacy",
    react: "‚úèÔ∏è",
    filename: __filename,
  },
  async (conn, mek, m, { q, reply, isOwner }) => {
    if (!isOwner) return reply("üö´ Only owner can use this.");
    if (!q) return reply("‚ùì Enter new bio text.");
    if (q.length > 139) return reply("‚ùó Max 139 characters.");
    try {
      await conn.updateProfileStatus(q);
      reply("‚úÖ Bio updated successfully!");
    } catch (e) {
      reply(`‚ùå Error: ${e.message}`);
    }
  }
);

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üë• GROUP ADD PRIVACY
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cmd(
  {
    pattern: "groupsprivacy",
    desc: "Update who can add bot to groups.",
    category: "privacy",
    react: "üë•",
    filename: __filename,
  },
  async (conn, mek, m, { args, reply, isOwner }) => {
    if (!isOwner) return reply("‚ùå You are not the owner!");
    try {
      const value = args[0] || "all";
      const valid = ["all", "contacts", "contact_blacklist", "none"];
      if (!valid.includes(value))
        return reply("‚ùå Invalid option. Use: all, contacts, contact_blacklist, none");
      await conn.updatePrivacySetting("groupadd", value);
      reply(`‚úÖ Group add privacy set to *${value}*`);
    } catch (e) {
      reply(`‚ö†Ô∏è Error: ${e.message}`);
    }
  }
);

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üîç GET PRIVACY SETTINGS
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cmd(
  {
    pattern: "getprivacy",
    desc: "View all privacy settings.",
    category: "privacy",
    react: "üîç",
    filename: __filename,
  },
  async (conn, mek, m, { reply, isOwner, from }) => {
    if (!isOwner) return reply("üö´ Owner only.");
    try {
      const p = await conn.fetchPrivacySettings(true);
      if (!p) return reply("‚ùå Could not fetch privacy settings.");
      const msg = `
‚ï≠‚îÄ‚îÄ‚îÄ„Äå PRIVACY SETTINGS „Äç‚îÄ‚îÄ‚îÄ‚óÜ
‚îÇ üëÄ Last Seen: ${p.last}
‚îÇ üñºÔ∏è Profile Photo: ${p.profile}
‚îÇ üí¨ Status: ${p.status}
‚îÇ üü¢ Online: ${p.online}
‚îÇ üë• Group Add: ${p.groupadd}
‚îÇ üìû Calls: ${p.calladd}
‚îÇ üì© Read Receipts: ${p.readreceipts}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;
      conn.sendMessage(from, { text: msg }, { quoted: mek });
    } catch (e) {
      reply(`‚ö†Ô∏è Error: ${e.message}`);
    }
  }
);

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üßë‚Äçü¶∞ GET PROFILE PICTURE
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cmd(
  {
    pattern: "getpp",
    desc: "Fetch a user's profile picture.",
    category: "privacy",
    react: "üßë‚Äçü¶∞",
    filename: __filename,
  },
  async (conn, mek, m, { quoted, sender, reply }) => {
    try {
      const target =
        quoted?.sender || (m.mentionedJid && m.mentionedJid[0]) || sender;
      const url = await conn
        .profilePictureUrl(target, "image")
        .catch(() => null);
      if (!url) return reply("‚ö†Ô∏è No profile picture found.");
      await conn.sendMessage(m.chat, {
        image: { url },
        caption: "üñºÔ∏è Profile picture fetched successfully!",
      });
    } catch (e) {
      reply(`‚ùå Error: ${e.message}`);
    }
  }
);