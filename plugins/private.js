const { cmd } = require("../lib/command");
const fs = require("fs");
const path = require("path");
const { downloadContentFromMessage } = require("@whiskeysockets/baileys");

//===========================================================
// üîê PRIVACY LIST MENU (with buttons + sections)
//===========================================================

cmd({
    pattern: "privacy1",
    alias: ["privacymenu1"],
    desc: "Privacy menu with list buttons",
    category: "privacy",
    react: "üîê",
    filename: __filename
}, 
async (conn, mek, m, { from, pushname, reply }) => {
    try {
        const menuText = `üëã Hello *${pushname || "User"}*!
üîê Welcome to *ZANTA √ó MD Privacy Center v1*

Use this interactive list to manage your bot's privacy settings safely.`;

        await conn.sendMessage(from, {
            text: menuText,
            footer: "üßô‚Äç‚ôÇÔ∏è ùêôùêÄùêçùêìùêÄ √ó ùêåùêÉ ùêéùêÖùêÇ | Privacy System",
            title: "üîê Privacy Control Panel v1",
            buttonText: "üìã OPEN PRIVACY MENU",
            sections: [
                {
                    title: "üìã View Privacy Info",
                    rows: [
                        { title: "üîç View All Privacy Settings", rowId: ".getprivacy1", description: "Check all current privacy settings" },
                        { title: "üìã Blocked List", rowId: ".blocklist1", description: "View users blocked by the bot" },
                    ]
                },
                {
                    title: "‚öôÔ∏è Update Privacy Options",
                    rows: [
                        { title: "üñºÔ∏è Set Profile Picture Privacy", rowId: ".setppall1 contacts", description: "Choose who can see the bot's profile picture" },
                        { title: "üü¢ Set Online Privacy", rowId: ".setonline1 match_last_seen", description: "Hide or show online status" },
                        { title: "üë• Set Group Add Privacy", rowId: ".groupsprivacy1 contacts", description: "Choose who can add the bot to groups" },
                    ]
                },
                {
                    title: "‚úèÔ∏è Profile Updates",
                    rows: [
                        { title: "üè∑Ô∏è Change Bot Name", rowId: ".setmyname1 ZANTA-MD", description: "Update your bot's WhatsApp name" },
                        { title: "üí¨ Update Bot Bio", rowId: ".updatebio1 Hello I‚Äôm ZANTA MD ü§ñ", description: "Set a new 'About' status" },
                        { title: "üñºÔ∏è Change Bot Profile Picture", rowId: ".setpp1", description: "Reply to an image and run this command" },
                    ]
                },
                {
                    title: "üßë‚Äçü¶∞ User Tools",
                    rows: [
                        { title: "üí¨ Get User Bio", rowId: ".getbio1", description: "Fetch a user‚Äôs WhatsApp bio" },
                        { title: "üßë‚Äçü¶∞ Get User Profile Picture", rowId: ".getpp1", description: "Fetch someone's profile picture" },
                    ]
                },
            ]
        }, { quoted: mek });
    } catch (e) {
        console.log(e);
        reply(`‚ö†Ô∏è Error while loading privacy menu:\n${e.message}`);
    }
});

//===========================================================
// üß© SUBCOMMANDS BELOW
//===========================================================

cmd({
    pattern: "blocklist1",
    desc: "View blocked users",
    category: "privacy",
    react: "üìã",
    filename: __filename
}, 
async (conn, mek, m, { reply, isOwner }) => {
    if (!isOwner) return reply("üö´ Only the bot owner can use this.");
    try {
        const blocked = await conn.fetchBlocklist();
        if (!blocked || blocked.length === 0) return reply("‚úÖ No blocked users found.");
        const list = blocked.map((u, i) => `${i + 1}. @${u.split("@")[0]}`).join("\n");
        await conn.sendMessage(m.chat, { text: `üö´ *Blocked Users:*\n\n${list}`, mentions: blocked }, { quoted: mek });
    } catch (e) {
        reply(`‚ö†Ô∏è Error: ${e.message}`);
    }
});

cmd({
    pattern: "getprivacy1",
    desc: "Show bot privacy settings",
    category: "privacy",
    react: "üîç",
    filename: __filename
}, 
async (conn, mek, m, { reply, isOwner }) => {
    if (!isOwner) return reply("üö´ Only the bot owner can use this.");
    try {
        const p = await conn.fetchPrivacySettings(true);
        if (!p) return reply("‚ö†Ô∏è Could not fetch privacy settings.");
        let txt = `‚ï≠‚îÄ‚îÄ‚îÄ„Äå *Privacy Settings* „Äç‚îÄ‚îÄ‚îÄ‚óÜ
‚îÇ üëÄ Last Seen: ${p.last}
‚îÇ üñºÔ∏è Profile Photo: ${p.profile}
‚îÇ üí¨ Status: ${p.status}
‚îÇ üü¢ Online: ${p.online}
‚îÇ üë• Group Add: ${p.groupadd}
‚îÇ üìû Call Privacy: ${p.calladd}
‚îÇ üì© Read Receipts: ${p.readreceipts}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;
        reply(txt);
    } catch (e) {
        reply(`‚ö†Ô∏è Error: ${e.message}`);
    }
});

cmd({
    pattern: "getbio1",
    desc: "Fetch user bio",
    category: "privacy",
    react: "üí¨",
    filename: __filename
}, 
async (conn, mek, m, { args, reply }) => {
    try {
        const jid = args[0] || mek.key.remoteJid;
        const about = await conn.fetchStatus?.(jid);
        if (!about?.status) return reply("No bio found.");
        reply(`üí¨ *User Bio:* ${about.status}`);
    } catch (e) {
        reply("‚ö†Ô∏è Couldn't fetch bio.");
    }
});

cmd({
    pattern: "getpp1",
    desc: "Get profile pic of a user",
    category: "privacy",
    react: "üñºÔ∏è",
    filename: __filename
}, 
async (conn, mek, m, { quoted, sender, reply }) => {
    try {
        const target = quoted?.sender || sender;
        const url = await conn.profilePictureUrl(target, "image").catch(() => null);
        if (!url) return reply("‚ö†Ô∏è No profile picture found.");
        await conn.sendMessage(m.chat, { image: { url }, caption: "üñºÔ∏è User Profile Picture" }, { quoted: mek });
    } catch (e) {
        reply(`‚ö†Ô∏è Error: ${e.message}`);
    }
});

cmd({
    pattern: "updatebio1",
    desc: "Update bot about text",
    category: "privacy",
    react: "‚úèÔ∏è",
    filename: __filename
}, 
async (conn, mek, m, { q, reply, isOwner }) => {
    if (!isOwner) return reply("üö´ Only the owner can update the bio.");
    if (!q) return reply("‚ùì Please enter a new bio.");
    if (q.length > 139) return reply("‚ùó Bio text too long.");
    try {
        await conn.updateProfileStatus(q);
        reply("‚úÖ Bio updated successfully!");
    } catch (e) {
        reply(`‚ö†Ô∏è Error: ${e.message}`);
    }
});